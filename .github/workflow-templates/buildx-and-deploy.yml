# Template building local source folders with Buildx and deploying via Helm
name: Buildx and Deploy
on:
  workflow_dispatch:
    inputs:
      sources:
        description: |
          Source folders containing Dockerfile and values.yml separated by '|'
        required: true
      suffix:
        description: Optional suffix appended to the ephemeral folder name
        required: false
        default: ''
      chart:
        description: Helm chart reference
        required: false
        default: oci://ghcr.io/johnhojohn969/generic-app
      registry-token:
        description: Token used to login to ghcr.io (defaults to GIT_PAT secret)
        required: false
        default: ''

permissions:
  contents: read
  packages: write
jobs:
  build-deploy:
    runs-on: self-hosted
    steps:
      - uses: johnhojohn969/setup-ephemeral-action@main
        with:
          suffix: ${{ inputs.suffix }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        shell: bash
        run: |
          REGISTRY_USER="${{ github.triggering_actor || github.actor }}"
          echo "${{ inputs.registry-token || secrets.GIT_PAT }}" | \
            docker login ghcr.io -u "$REGISTRY_USER" --password-stdin
      - name: Extract repo name for image prefix
        id: repo
        shell: bash
        run: |
          repo_name=$(basename "${{ github.repository }}")
          echo "name=${repo_name,,}" >> "$GITHUB_OUTPUT"
      - name: Build and Deploy
        working-directory: ${{ env.WORK_DIR }}
        shell: bash
        run: |
          IFS='|' read -ra DIRS <<< "${{ inputs.sources }}"
          for dir in "${DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "Source directory '$dir' not found" >&2
              exit 1
            fi
            name=$(basename "$dir")
            image="ghcr.io/${{ github.repository_owner }}/${{ steps.repo.outputs.name }}-$name:latest"
            docker buildx build -t "$image" --push "$dir"
            if [ ! -f "$dir/values.yml" ]; then
              echo "Values file '$dir/values.yml' not found" >&2
              exit 1
            fi
            helm upgrade --install "$name" "${{ inputs.chart }}" \
              -f "$dir/values.yml" \
              --namespace "$name" --create-namespace
          done
